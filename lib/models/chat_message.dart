enum ChatMessageSender { user, ai }

class ChatMessage {
  final String id;
  final String text;
  final ChatMessageSender sender;
  final DateTime timestamp;

  ChatMessage({
    required this.id,
    required this.text,
    required this.sender,
    required this.timestamp,
  });

  // Converts a ChatMessage to a Map for Supabase insertion into 'chat_messages' table
  Map<String, dynamic> toJsonForDb(String sessionId, String userId) {
    return {
      'session_id': sessionId,
      'user_id': userId, // The user who owns this session/message
      'sender': sender == ChatMessageSender.user ? 'user' : 'ai',
      'content': text,
      'timestamp': timestamp.toIso8601String(),
      // The 'id' for the chat_messages table row will be auto-generated by Supabase (UUID)
    };
  }

  // Optional: Add fromJson/toJson methods if you plan to serialize this model,
  // for example, when saving chat history to Supabase.
  // Map<String, dynamic> toJson() => {
  //   'id': id,
  //   'text': text,
  //   'sender': sender.toString(), // or sender.name in Dart 3
  //   'timestamp': timestamp.toIso8601String(),
  // };

  // factory ChatMessage.fromJson(Map<String, dynamic> json) => ChatMessage(
  //   id: json['id'],
  //   text: json['text'],
  //   sender: ChatMessageSender.values.firstWhere((e) => e.toString() == json['sender']),
  //   timestamp: DateTime.parse(json['timestamp']),
  // );
} 